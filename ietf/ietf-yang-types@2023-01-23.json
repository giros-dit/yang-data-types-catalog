{
    "module_name": "ietf-yang-types",
    "module_prefix": "yang",
    "module_namespace": "urn:ietf:params:xml:ns:yang:ietf-yang-types",
    "module_revision": "2023-01-23",
    "module_typedefs": {
        "counter32": {
            "description": "The counter32 type represents a non-negative integer that monotonically increases until it reaches a maximum value of 2^32-1 (4294967295 decimal), when it wraps around and starts increasing again from zero. Counters have no defined 'initial' value, and thus, a single value of a counter has (in general) no information content. Discontinuities in the monotonically increasing value normally occur at re-initialization of the management system, and at other times as specified in the description of a schema node using this type. If such other times can occur, for example, the instantiation of a schema node of type counter32 at times other than re-initialization, then a corresponding schema node should be defined, with an appropriate type, to indicate the last discontinuity. The counter32 type should not be used for configuration schema nodes. A default statement SHOULD NOT be used in combination with the type counter32. In the value set and its semantics, this type is equivalent to the Counter32 type of the SMIv2.",
            "defined_type": "uint32",
            "primitive_type": "uint32"
        },
        "zero-based-counter32": {
            "description": "The zero-based-counter32 type represents a counter32 that has the defined 'initial' value zero. A schema node instance of this type will be set to zero (0) on creation and will thereafter increase monotonically until it reaches a maximum value of 2^32-1 (4294967295 decimal), when it wraps around and starts increasing again from zero. Provided that an application discovers a new schema node instance of this type within the minimum time to wrap, it can use the 'initial' value as a delta. It is important for a management station to be aware of this minimum time and the actual time between polls, and to discard data if the actual time is too long or there is no defined minimum time. In the value set and its semantics, this type is equivalent to the ZeroBasedCounter32 textual convention of the SMIv2.",
            "defined_type": "counter32",
            "primitive_type": "uint32"
        },
        "counter64": {
            "description": "The counter64 type represents a non-negative integer that monotonically increases until it reaches a maximum value of 2^64-1 (18446744073709551615 decimal), when it wraps around and starts increasing again from zero. Counters have no defined 'initial' value, and thus, a single value of a counter has (in general) no information content. Discontinuities in the monotonically increasing value normally occur at re-initialization of the management system, and at other times as specified in the description of a schema node using this type. If such other times can occur, for example, the instantiation of a schema node of type counter64 at times other than re-initialization, then a corresponding schema node should be defined, with an appropriate type, to indicate the last discontinuity. The counter64 type should not be used for configuration schema nodes. A default statement SHOULD NOT be used in combination with the type counter64. In the value set and its semantics, this type is equivalent to the Counter64 type of the SMIv2.",
            "defined_type": "uint64",
            "primitive_type": "uint64"
        },
        "zero-based-counter64": {
            "description": "The zero-based-counter64 type represents a counter64 that has the defined 'initial' value zero. A schema node instance of this type will be set to zero (0) on creation and will thereafter increase monotonically until it reaches a maximum value of 2^64-1 (18446744073709551615 decimal), when it wraps around and starts increasing again from zero. Provided that an application discovers a new schema node instance of this type within the minimum time to wrap, it can use the 'initial' value as a delta. It is important for a management station to be aware of this minimum time and the actual time between polls, and to discard data if the actual time is too long or there is no defined minimum time. In the value set and its semantics, this type is equivalent to the ZeroBasedCounter64 textual convention of the SMIv2.",
            "defined_type": "counter64",
            "primitive_type": "uint64"
        },
        "gauge32": {
            "description": "The gauge32 type represents a non-negative integer, which may increase or decrease, but shall never exceed a maximum value, nor fall below a minimum value. The maximum value cannot be greater than 2^32-1 (4294967295 decimal), and the minimum value cannot be smaller than 0. The value of a gauge32 has its maximum value whenever the information being modeled is greater than or equal to its maximum value, and has its minimum value whenever the information being modeled is smaller than or equal to its minimum value. If the information being modeled subsequently decreases below (increases above) the maximum (minimum) value, the gauge32 also decreases (increases). In the value set and its semantics, this type is equivalent to the Gauge32 type of the SMIv2.",
            "defined_type": "uint32",
            "primitive_type": "uint32"
        },
        "gauge64": {
            "description": "The gauge64 type represents a non-negative integer, which may increase or decrease, but shall never exceed a maximum value, nor fall below a minimum value. The maximum value cannot be greater than 2^64-1 (18446744073709551615), and the minimum value cannot be smaller than 0. The value of a gauge64 has its maximum value whenever the information being modeled is greater than or equal to its maximum value, and has its minimum value whenever the information being modeled is smaller than or equal to its minimum value. If the information being modeled subsequently decreases below (increases above) the maximum (minimum) value, the gauge64 also decreases (increases). In the value set and its semantics, this type is equivalent to the CounterBasedGauge64 SMIv2 textual convention defined in RFC 2856",
            "defined_type": "uint64",
            "primitive_type": "uint64"
        },
        "object-identifier": {
            "description": "The object-identifier type represents administratively assigned names in a registration-hierarchical-name tree. Values of this type are denoted as a sequence of numerical non-negative sub-identifier values. Each sub-identifier value MUST NOT exceed 2^32-1 (4294967295). Sub-identifiers are separated by single dots and without any intermediate whitespace. The ASN.1 standard restricts the value space of the first sub-identifier to 0, 1, or 2. Furthermore, the value space of the second sub-identifier is restricted to the range 0 to 39 if the first sub-identifier is 0 or 1. Finally, the ASN.1 standard requires that an object identifier has always at least two sub-identifiers. The pattern captures these restrictions. Although the number of sub-identifiers is not limited, module designers should realize that there may be implementations that stick with the SMIv2 limit of 128 sub-identifiers. This type is a superset of the SMIv2 OBJECT IDENTIFIER type since it is not restricted to 128 sub-identifiers. Hence, this type SHOULD NOT be used to represent the SMIv2 OBJECT IDENTIFIER type; the object-identifier-128 type SHOULD be used instead.",
            "defined_type": "string",
            "primitive_type": "string"
        },
        "object-identifier-128": {
            "description": "This type represents object-identifiers restricted to 128 sub-identifiers. In the value set and its semantics, this type is equivalent to the OBJECT IDENTIFIER type of the SMIv2.",
            "defined_type": "object-identifier",
            "primitive_type": "string"
        },
        "date-and-time": {
            "description": "The date-and-time type is a profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar. The profile is defined by the date-time production in Section 5.6 of RFC 3339. The date-and-time type is compatible with the dateTime XML schema dateTime type with the following notable exceptions: (a) The date-and-time type does not allow negative years. (b) The time-offset -00:00 indicates that the date-and-time   value is reported in UTC and that the local time zone   reference point is unknown. The time-offsets +00:00 and Z   both indicate that the date-and-time value is reported in   UTC and that the local time reference point is UTC (see RFC   3339 section 4.3). This type is not equivalent to the DateAndTime textual convention of the SMIv2 since RFC 3339 uses a different separator between full-date and full-time and provides higher resolution of time-secfrac. The canonical format for date-and-time values with a known time zone uses a numeric time zone offset that is calculated using the device's configured known offset to UTC time. A change of the device's offset to UTC time will cause date-and-time values to change accordingly. Such changes might happen periodically in case a server follows automatically daylight saving time (DST) time zone offset changes. The canonical format for date-and-time values with an unknown time zone (usually referring to the notion of local time) uses the time-offset -00:00, i.e., date-and-time values must be reported in UTC.",
            "defined_type": "string",
            "primitive_type": "string"
        },
        "date-with-zone-offset": {
            "description": "The date type represents a time-interval of the length of a day, i.e., 24 hours. The date type is compatible with the XML schema date type with the following notable exceptions: (a) The date type does not allow negative years. (b) The time-offset -00:00 indicates that the date value is   reported in UTC and that the local time zone reference point   is unknown. The time-offsets +00:00 and Z both indicate that   the date value is reported in UTC and that the local time   reference point is UTC (see RFC 3339 section 4.3). The canonical format for date values with a known time zone uses a numeric time zone offset that is calculated using the device's configured known offset to UTC time. A change of the device's offset to UTC time will cause date values to change accordingly. Such changes might happen periodically in case a server follows automatically daylight saving time (DST) time zone offset changes. The canonical format for date values with an unknown time zone (usually referring to the notion of local time) uses the time-offset -00:00, i.e., date values must be reported in UTC.",
            "defined_type": "string",
            "primitive_type": "string"
        },
        "date-no-zone": {
            "description": "The date-no-zone type represents a date without the optional time zone offset information.",
            "defined_type": "date-with-zone-offset",
            "primitive_type": "string"
        },
        "time-with-zone-offset": {
            "description": "The time type represents an instance of time of zero-duration that recurs every day. The time type is compatible with the XML schema time type with the following notable exception: (a) The time-offset -00:00 indicates that the time value is   reported in UTC and that the local time zone reference point   is unknown. The time-offsets +00:00 and Z both indicate that   the time value is reported in UTC and that the local time   reference point is UTC (see RFC 3339 section 4.3). The canonical format for time values with a known time zone uses a numeric time zone offset that is calculated using the device's configured known offset to UTC time. A change of the device's offset to UTC time will cause time values to change accordingly. Such changes might happen periodically in case a server follows automatically daylight saving time (DST) time zone offset changes. The canonical format for time values with an unknown time zone (usually referring to the notion of local time) uses the time-offset -00:00, i.e., time values must be reported in UTC.",
            "defined_type": "string",
            "primitive_type": "string"
        },
        "time-no-zone": {
            "description": "The time-no-zone type represents a time without the optional time zone offset information.",
            "defined_type": "time-with-zone-offset",
            "primitive_type": "string"
        },
        "hours32": {
            "description": "A period of time, measured in units of hours. The maximum time period that can be expressed is in the range [-89478485 days 08:00:00 to 89478485 days 07:00:00]. This type should be range restricted in situations where only non-negative time periods are desirable, (i.e., range '0..max').",
            "defined_type": "int32",
            "primitive_type": "int32"
        },
        "minutes32": {
            "description": "A period of time, measured in units of minutes. The maximum time period that can be expressed is in the range [-1491308 days 2:08:00 to 1491308 days 2:07:00]. This type should be range restricted in situations where only non-negative time periods are desirable, (i.e., range '0..max').",
            "defined_type": "int32",
            "primitive_type": "int32"
        },
        "seconds32": {
            "description": "A period of time, measured in units of seconds. The maximum time period that can be expressed is in the range [-24855 days 03:14:08 to 24855 days 03:14:07]. This type should be range restricted in situations where only non-negative time periods are desirable, (i.e., range '0..max').",
            "defined_type": "int32",
            "primitive_type": "int32"
        },
        "centiseconds32": {
            "description": "A period of time, measured in units of 10^-2 seconds. The maximum time period that can be expressed is in the range [-248 days 13:13:56 to 248 days 13:13:56]. This type should be range restricted in situations where only non-negative time periods are desirable, (i.e., range '0..max').",
            "defined_type": "int32",
            "primitive_type": "int32"
        },
        "milliseconds32": {
            "description": "A period of time, measured in units of 10^-3 seconds. The maximum time period that can be expressed is in the range [-24 days 20:31:23 to 24 days 20:31:23]. This type should be range restricted in situations where only non-negative time periods are desirable, (i.e., range '0..max').",
            "defined_type": "int32",
            "primitive_type": "int32"
        },
        "microseconds32": {
            "description": "A period of time, measured in units of 10^-6 seconds. The maximum time period that can be expressed is in the range [-00:35:47 to 00:35:47]. This type should be range restricted in situations where only non-negative time periods are desirable, (i.e., range '0..max').",
            "defined_type": "int32",
            "primitive_type": "int32"
        },
        "microseconds64": {
            "description": "A period of time, measured in units of 10^-6 seconds. The maximum time period that can be expressed is in the range [-106751991 days 04:00:54 to 106751991 days 04:00:54]. This type should be range restricted in situations where only non-negative time periods are desirable, (i.e., range '0..max').",
            "defined_type": "int64",
            "primitive_type": "int64"
        },
        "nanoseconds32": {
            "description": "A period of time, measured in units of 10^-9 seconds. The maximum time period that can be expressed is in the range [-00:00:02 to 00:00:02]. This type should be range restricted in situations where only non-negative time periods are desirable, (i.e., range '0..max').",
            "defined_type": "int32",
            "primitive_type": "int32"
        },
        "nanoseconds64": {
            "description": "A period of time, measured in units of 10^-9 seconds. The maximum time period that can be expressed is in the range [-106753 days 23:12:44 to 106752 days 0:47:16]. This type should be range restricted in situations where only non-negative time periods are desirable, (i.e., range '0..max').",
            "defined_type": "int64",
            "primitive_type": "int64"
        },
        "timeticks": {
            "description": "The timeticks type represents a non-negative integer that represents the time, modulo 2^32 (4294967296 decimal), in hundredths of a second between two epochs. When a schema node is defined that uses this type, the description of the schema node identifies both of the reference epochs. In the value set and its semantics, this type is equivalent to the TimeTicks type of the SMIv2.",
            "defined_type": "uint32",
            "primitive_type": "uint32"
        },
        "timestamp": {
            "description": "The timestamp type represents the value of an associated timeticks schema node instance at which a specific occurrence happened. The specific occurrence must be defined in the description of any schema node defined using this type. When the specific occurrence occurred prior to the last time the associated timeticks schema node instance was zero, then the timestamp value is zero. Note that this requires all timestamp values to be reset to zero when the value of the associated timeticks schema node instance reaches 497+ days and wraps around to zero. The associated timeticks schema node must be specified in the description of any schema node using this type. In the value set and its semantics, this type is equivalent to the TimeStamp textual convention of the SMIv2.",
            "defined_type": "timeticks",
            "primitive_type": "uint32"
        },
        "phys-address": {
            "description": "Represents media- or physical-level addresses represented as a sequence octets, each octet represented by two hexadecimal numbers. Octets are separated by colons. The canonical representation uses lowercase characters. In the value set and its semantics, this type is equivalent to the PhysAddress textual convention of the SMIv2.",
            "defined_type": "string",
            "primitive_type": "string"
        },
        "mac-address": {
            "description": "The mac-address type represents an IEEE 802 MAC address. The canonical representation uses lowercase characters. In the value set and its semantics, this type is equivalent to the MacAddress textual convention of the SMIv2.",
            "defined_type": "string",
            "primitive_type": "string"
        },
        "xpath1.0": {
            "description": "This type represents an XPATH 1.0 expression. When a schema node is defined that uses this type, the description of the schema node MUST specify the XPath context in which the XPath expression is evaluated.",
            "defined_type": "string",
            "primitive_type": "string"
        },
        "hex-string": {
            "description": "A hexadecimal string with octets represented as hex digits separated by colons. The canonical representation uses lowercase characters.",
            "defined_type": "string",
            "primitive_type": "string"
        },
        "uuid": {
            "description": "A Universally Unique IDentifier in the string representation defined in RFC 4122. The canonical representation uses lowercase characters. The following is an example of a UUID in string representation: f81d4fae-7dec-11d0-a765-00a0c91e6bf6 ",
            "defined_type": "string",
            "primitive_type": "string"
        },
        "dotted-quad": {
            "description": "An unsigned 32-bit number expressed in the dotted-quad notation, i.e., four octets written as decimal numbers and separated with the '.' (full stop) character.",
            "defined_type": "string",
            "primitive_type": "string"
        },
        "language-tag": {
            "description": "A language tag according to RFC 5646 (BCP 47). The canonical representation uses lowercase characters. Values of this type must be well-formed language tags, in conformance with the definition of well-formed tags in BCP 47. Implementations MAY further limit the values they accept to those permitted by a 'validating' processor, as defined in BCP 47. The canonical representation of values of this type is aligned with the SMIv2 LangTag textual convention for language tags fitting the length constraints imposed by the LangTag textual convention.",
            "defined_type": "string",
            "primitive_type": "string"
        },
        "yang-identifier": {
            "description": "A YANG identifier string as defined by the 'identifier' rule in Section 14 of RFC 7950. An identifier must start with an alphabetic character or an underscore followed by an arbitrary sequence of alphabetic or numeric characters, underscores, hyphens, or dots. This definition conforms to YANG 1.1 defined in RFC 7950. An earlier version of this definition did exclude all identifiers starting with any possible combination of the lowercase or uppercase character sequence 'xml', as required by YANG 1 defined in RFC 6020. If this type is used in a YANG 1 context, then this restriction still applies.",
            "defined_type": "string",
            "primitive_type": "string"
        }
    }
}
